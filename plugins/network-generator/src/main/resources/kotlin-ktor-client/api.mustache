{{>licenseInfo}}
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import io.ktor.client.HttpClient
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.request
import io.ktor.client.request.forms.FormDataContent
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.takeFrom
import kotlinx.serialization.json.Json
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.MapSerializer
import kotlinx.serialization.builtins.serializer
import io.ktor.client.call.ReceivePipelineException
import io.ktor.http.content.TextContent

{{#operations}}
{{#publicApi}}public {{/publicApi}}{{#nonPublicApi}}internal {{/nonPublicApi}}{{#openApiClasses}}open {{/openApiClasses}}class {{classname}}(basePath: kotlin.String = "{{{basePath}}}", httpClient: HttpClient, json: Json) {
    private val _basePath = basePath
    private val _httpClient = httpClient
    private val _json = json

    {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}* @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}}* @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */{{#returnType}}
    @Suppress("UNCHECKED_CAST"){{/returnType}}
    {{#publicApi}}public {{/publicApi}}{{#openApiClasses}}open {{/openApiClasses}}suspend fun {{operationId}}({{#allParams}}{{paramName}}: {{{dataType}}}{{^required}}?{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}} {
        val builder = HttpRequestBuilder()

        builder.method = HttpMethod.{{httpMethod}}
        builder.url {
            takeFrom(_basePath)
            encodedPath = encodedPath.let { startingPath ->
                path("{{path}}")
                return@let startingPath + encodedPath.substring(1)
            }
            {{#hasQueryParams}}
            @Suppress("UNNECESSARY_SAFE_CALL")
            with(parameters) {
                {{#queryParams}}
                {{#isContainer}}
                {{paramName}}?.let { appendAll("{{baseName}}", it.map { it.toString() }) }
                {{/isContainer}}
                {{^isContainer}}
                {{paramName}}?.let { append("{{baseName}}", it.toString()) }
                {{/isContainer}}
                {{/queryParams}}
            }
            {{/hasQueryParams}}
        }
        {{#bodyParams}}
        @Suppress("SENSELESS_COMPARISON")
        if({{paramName}} != null) {
            builder.body = TextContent(
        {{#dataType}}
            {{#isArray}}
                {{#items}}
                _json.encodeToString(ListSerializer({{dataType}}.serializer()),
                {{/items}}
            {{/isArray}}
            {{#isMap}}
                _json.encodeToString(
                    MapSerializer(
                        keySerializer = String.serializer(),
                        valueSerializer = {{baseType}}.serializer()
                    ),
            {{/isMap}}
            {{^isArray}}{{^isMap}}
                _json.encodeToString({{dataType}}.serializer(),
            {{/isMap}}{{/isArray}}
                {{paramName}}),
        {{/dataType}}
                ContentType.Application.Json.withoutParameters()
            )
        }
        {{/bodyParams}}

        {{#hasFormParams}}
        val formData = FormDataContent(Parameters.build {
            {{#formParams}}
            {{paramName}}?.let { append("{{baseName}}", it.toString()) }
            {{/formParams}}
        })
        builder.body = formData
        {{/hasFormParams}}
        with(builder.headers) {
            append("Accept", "application/json")
        }

        try {
        {{#returnType}}
            {{^returnTypeIsPrimitive}}
            //not primitive type
            val result: String = _httpClient.request(builder)
            return _json.decodeFromString({{returnBaseType}}.serializer(){{#isArray}}.let { ListSerializer(it) }{{/isArray}}, result)
            {{/returnTypeIsPrimitive}}
            {{#returnTypeIsPrimitive}}
            //primitive type
            return _httpClient.request(builder)
            {{/returnTypeIsPrimitive}}
        {{/returnType}}
        {{^returnType}}
            return _httpClient.request(builder)
        {{/returnType}}
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
    }

    {{/operation}}
}
{{/operations}}