{{>licenseInfo}}
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import io.ktor.client.HttpClient
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.request
import io.ktor.client.request.forms.FormDataContent
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.takeFrom
import kotlinx.serialization.json.Json
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.MapSerializer
import kotlinx.serialization.builtins.SetSerializer
import kotlinx.serialization.builtins.serializer
import io.ktor.client.call.ReceivePipelineException
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.forms.submitFormWithBinaryData
import io.ktor.http.ContentDisposition
import io.ktor.http.HttpHeaders
import io.ktor.http.content.TextContent
import io.ktor.http.Headers
import io.ktor.utils.io.core.Input

{{#operations}}
{{>classes_modifiers}}interface {{classname}} {

{{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}* @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}}* @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */
    {{^nonPublicApi}}public {{/nonPublicApi}}suspend fun {{operationId}}({{#allParams}}{{paramName}}: {{#isBinary}}Input{{/isBinary}}{{^isBinary}}{{{dataType}}}{{/isBinary}}{{^required}}? = null{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}kotlin.Unit{{/returnType}}

    {{/operation}}

    {{^nonPublicApi}}public {{/nonPublicApi}}companion object {
        {{^nonPublicApi}}public {{/nonPublicApi}}operator fun invoke(basePath: String = "{{{basePath}}}", httpClient: HttpClient, json: Json): {{classname}} = {{classname}}Impl(basePath, httpClient, json)
    }
}

{{>classes_modifiers}}{{#isOpen}}open {{/isOpen}}class {{classname}}Impl(basePath: kotlin.String, httpClient: HttpClient, json: Json): {{classname}} {
    private val _basePath = basePath
    private val _httpClient = httpClient
    private val _json = json

    {{#operation}}
    /**
    * {{summary}}
    * {{notes}}
    {{#allParams}}* @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}}* @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
    */{{#returnType}}
    @Suppress("UNCHECKED_CAST"){{/returnType}}
    override {{^nonPublicApi}}public {{/nonPublicApi}}{{#isOpen}}open {{/isOpen}}suspend fun {{operationId}}({{#allParams}}{{paramName}}: {{#isBinary}}Input{{/isBinary}}{{^isBinary}}{{{dataType}}}{{/isBinary}}{{^required}}?{{/required}}{{^-last}}, {{/-last}}{{/allParams}}) : {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}kotlin.Unit{{/returnType}} {
        {{^hasFormParams}}
        val builder = HttpRequestBuilder()

        builder.method = HttpMethod.{{httpMethod}}
        builder.url {
            takeFrom(_basePath)
            encodedPath = encodedPath.let { startingPath ->
                path("{{path}}")
                return@let startingPath + encodedPath.substring(1)
            }
            {{#hasQueryParams}}
            @Suppress("UNNECESSARY_SAFE_CALL")
            with(parameters) {
                {{#queryParams}}
                {{#isContainer}}
                {{paramName}}?.let { appendAll("{{baseName}}", it.map { it.toString() }) }
                {{/isContainer}}
                {{^isContainer}}
                {{paramName}}?.let { append("{{baseName}}", it.toString()) }
                {{/isContainer}}
                {{/queryParams}}
            }
            {{/hasQueryParams}}
        }
        {{#bodyParams}}
        @Suppress("SENSELESS_COMPARISON")
        if({{paramName}} != null) {
            builder.body = TextContent(
        {{#dataType}}
            {{#isArray}}
                {{#uniqueItems}}
                {{#items}}
                _json.encodeToString(SetSerializer({{dataType}}.serializer()),
                {{/items}}
                {{/uniqueItems}}
                {{^uniqueItems}}
                {{#items}}
                _json.encodeToString(ListSerializer({{dataType}}.serializer()),
                {{/items}}
                {{/uniqueItems}}
            {{/isArray}}
            {{#isMap}}
                _json.encodeToString(
                    MapSerializer(
                        keySerializer = String.serializer(),
                        valueSerializer = {{baseType}}.serializer()
                    ),
            {{/isMap}}
            {{^isArray}}{{^isMap}}
                _json.encodeToString({{dataType}}.serializer(),
            {{/isMap}}{{/isArray}}
                {{paramName}}),
        {{/dataType}}
                ContentType.Application.Json.withoutParameters()
            )
        }
        {{/bodyParams}}

        with(builder.headers) {
            append("Accept", "application/json")
            {{#headerParams}}
            if ({{paramName}} != null)
                append("{{baseName}}", {{paramName}})
            {{/headerParams}}
        }

        try {
        {{#returnType}}
            {{#vendorExtensions.x-successResponse}}
                val serializer = {{>property_serializer}}
                //not primitive type
                val result: String = _httpClient.request(builder)
                return _json.decodeFromString(serializer, result)
            {{/vendorExtensions.x-successResponse}}
        {{/returnType}}
        {{^returnType}}
            return _httpClient.request(builder)
        {{/returnType}}
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
        {{/hasFormParams}}

        {{#hasFormParams}}
        val fileName = "image.jpg"

        try {
            {{#returnType}}return {{/returnType}}_httpClient.submitFormWithBinaryData {
                url {
                    takeFrom(_basePath)
                    encodedPath = encodedPath.let { startingPath ->
                        path("{{path}}")
                        return@let startingPath + encodedPath.substring(1)
                    }
                    {{#hasQueryParams}}
                    @Suppress("UNNECESSARY_SAFE_CALL")
                    with(parameters) {
                        {{#queryParams}}
                        {{#isContainer}}
                        {{paramName}}?.let { appendAll("{{baseName}}", it.map { it.toString() }) }
                        {{/isContainer}}
                        {{^isContainer}}
                        {{paramName}}?.let { append("{{baseName}}", it.toString()) }
                        {{/isContainer}}
                        {{/queryParams}}
                    }
                    {{/hasQueryParams}}
                }
                body = MultiPartFormDataContent(
                    formData {
                        {{#formParams}}
                        {{#isBinary}}
                        {{paramName}}?.let { {{paramName}} ->
                            appendInput(
                                key = "{{baseName}}",
                                block = { {{paramName}} },
                                headers = Headers.build {
                                    append(
                                        HttpHeaders.ContentType,
                                        ContentType.Application.OctetStream.toString()
                                    )
                                    append(
                                        HttpHeaders.ContentDisposition, ContentDisposition.File
                                            .withParameter(ContentDisposition.Parameters.FileName, fileName)
                                            .toString()
                                    )
                                }
                            )
                        }
                        {{/isBinary}}
                        {{^isBinary}}
                        {{paramName}}?.let { {{paramName}} ->
                            append(
                                key = "{{baseName}}",
                                value = _json.encodeToString(
                                    {{{dataType}}}.serializer(),
                                    {{paramName}}
                                )
                            )
                        }
                        {{/isBinary}}
                        {{/formParams}}
                    }
                )
            }
        } catch (pipeline: ReceivePipelineException) {
            throw pipeline.cause
        }
        {{/hasFormParams}}
    }
    {{/operation}}
}
{{/operations}}
